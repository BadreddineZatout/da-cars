generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique
  password String
}

model Brand {
  id        Int       @id @default(autoincrement())
  name      String
  parentId  Int?
  parent    Brand?    @relation("ParentBrand", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subBrands Brand[]   @relation("ParentBrand")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  vehicles  Vehicle[]
}

model Service {
  id           Int           @id @default(autoincrement())
  name_de      String
  name_fr      String
  description_de  String?
  description_fr  String?
  items        Item[]
  reservations Reservation[]
}

model Item {
  id           Int           @id @default(autoincrement())
  name_de      String
  name_fr      String
  price        Float
  serviceId    Int
  service      Service       @relation(fields: [serviceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reservations Reservation[]
}

model Vehicle {
  id          Int              @id @default(autoincrement())
  name        String
  brandId     Int
  price       Float
  description String
  phone       String?
  address     String
  isPremium   Boolean          @default(false)
  rating      Int              @default(0)
  owner       String           @default("Anonymous Owner")
  brand       Brand            @relation(fields: [brandId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  media       VehicleMedia[]
  features    Feature[]
  tags        TagsOnVehicles[]
}

model Feature {
  id        Int     @id @default(autoincrement())
  name      String
  vehicleId Int
  Vehicle   Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Tag {
  id       Int              @id @default(autoincrement())
  name     String
  vehicles TagsOnVehicles[]
}

model TagsOnVehicles {
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  vehicleId Int
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tagId     Int
  value     String

  @@id([vehicleId, tagId])
}

model VehicleMedia {
  id        Int     @id @default(autoincrement())
  name      String
  path      String
  vehicleId Int
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Carousel {
  id   Int    @id @default(autoincrement())
  path String
}

model Reservation {
  id           Int     @id @default(autoincrement())
  first_name   String
  last_name    String
  phone_number String
  email        String?
  serviceId    Int
  itemId       Int
  date         String
  status       Int
  service      Service @relation(fields: [serviceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  item         Item    @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
